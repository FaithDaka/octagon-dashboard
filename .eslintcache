[{"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\index.js":"1","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\App.js":"2","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Login\\index.js":"3","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\LoadSpinner.js":"4","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Layout\\index.js":"5","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Header\\index.js":"6","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\index.js":"7","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\Dashboard.js":"8","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\Client.js":"9","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\Case.js":"10","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Dashboard\\index.js":"11","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Modal\\index.js":"12","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Modal\\Assign.js":"13","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\index.js":"14","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Modal\\ReAssign.js":"15","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\AddCase.js":"16","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\CaseTable.js":"17","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\index.js":"18","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\AddClient.js":"19","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\Company.js":"20","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\Individual.js":"21","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\utils\\helpers\\storage.js":"22","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\utils\\helpers\\set.js":"23","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\UpdateCase.js":"24"},{"size":230,"mtime":1611410373236,"results":"25","hashOfConfig":"26"},{"size":889,"mtime":1612979670448,"results":"27","hashOfConfig":"26"},{"size":2570,"mtime":1612896310680,"results":"28","hashOfConfig":"26"},{"size":295,"mtime":1611408163489,"results":"29","hashOfConfig":"26"},{"size":474,"mtime":1612974636627,"results":"30","hashOfConfig":"26"},{"size":1089,"mtime":1612901711640,"results":"31","hashOfConfig":"26"},{"size":4541,"mtime":1612975259440,"results":"32","hashOfConfig":"26"},{"size":231,"mtime":1611644706767,"results":"33","hashOfConfig":"26"},{"size":230,"mtime":1612391332265,"results":"34","hashOfConfig":"26"},{"size":216,"mtime":1612391332264,"results":"35","hashOfConfig":"26"},{"size":6054,"mtime":1612975930965,"results":"36","hashOfConfig":"26"},{"size":929,"mtime":1612391332262,"results":"37","hashOfConfig":"26"},{"size":3101,"mtime":1612910121166,"results":"38","hashOfConfig":"26"},{"size":340,"mtime":1612975137506,"results":"39","hashOfConfig":"26"},{"size":3392,"mtime":1612908947520,"results":"40","hashOfConfig":"26"},{"size":6709,"mtime":1612979532177,"results":"41","hashOfConfig":"26"},{"size":4140,"mtime":1612979909199,"results":"42","hashOfConfig":"26"},{"size":4637,"mtime":1612974877086,"results":"43","hashOfConfig":"26"},{"size":2838,"mtime":1612890916062,"results":"44","hashOfConfig":"26"},{"size":6217,"mtime":1612894255903,"results":"45","hashOfConfig":"26"},{"size":5673,"mtime":1612892429828,"results":"46","hashOfConfig":"26"},{"size":570,"mtime":1612896085286,"results":"47","hashOfConfig":"26"},{"size":712,"mtime":1612896045765,"results":"48","hashOfConfig":"26"},{"size":6754,"mtime":1612981027816,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"8iai2g",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\index.js",[],[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\App.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Login\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\LoadSpinner.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Layout\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Header\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\Dashboard.js",[],[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\Client.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Tabs\\Case.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Dashboard\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Modal\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Modal\\Assign.js",["105","106","107","108"],"import React, { useEffect, useState } from 'react';\r\nimport LoadSpinner from '../LoadSpinner';\r\nimport { getEmployees, getClientCases } from '../../utils/helpers/storage';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nconst Assign = ({ close, id, case_name, client }) => {\r\n  const [emps, setEmps] = useState(JSON.parse(getEmployees()))\r\n  var [c_case, setCCases] = useState(JSON.parse(getClientCases()))\r\n\r\n  const [emp_name, setName] = useState('')\r\n\r\n  const [showAlert, setShowAlert] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const hideAlert = () => setShowAlert(false)||setError('');\r\n\r\n  const [loading, setLoading]= useState(false)\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true)\r\n\r\n    c_case = c_case.filter(function (_c) {\r\n      return _c.id !== id;\r\n    });\r\n\r\n    const newCC = {\r\n      id:id,\r\n      client:client,\r\n      case:case_name,\r\n      assigned:emp_name\r\n    }\r\n\r\n    c_case.push(newCC)\r\n    setCCases(c_case)\r\n    console.log('New CC:', c_case)\r\n    localStorage.setItem('ClientCase', JSON.stringify(c_case))\r\n\r\n    setLoading(false)\r\n    setShowAlert(true);\r\n    setSuccess('Updated')\r\n    close()\r\n  }\r\n\r\n  const loadData = () =>{\r\n    setEmps(emps)\r\n    setCCases(c_case)\r\n  }\r\n\r\n  useEffect(()=>{\r\n    loadData()\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"card otc__assign\">\r\n      {showAlert && success && (\r\n        <SweetAlert\r\n          success\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={success}\r\n          timeout={3000}\r\n        />\r\n      )}\r\n      {showAlert && error && (\r\n        <SweetAlert\r\n          danger\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={error}\r\n          timeout={4000}\r\n        />\r\n      )}\r\n      <div className=\"card-header\" />\r\n      <div className=\"card-body\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Case</label>\r\n            <select\r\n              className=\"form-control\"\r\n              value={case_name}\r\n            >\r\n              <option>{case_name}</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Employee</label>\r\n            <select\r\n              className=\"form-control\"\r\n              value={emp_name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            >\r\n              <option>{null}</option>\r\n              {emps.length > 0 ? (\r\n                emps.map((e) => \r\n                  <option key={e.id} value={e.name}\r\n                    onClick={()=>setName(e.name)}>\r\n                    {e.name}\r\n                  </option>)\r\n              ) : (\r\n                <LoadSpinner />\r\n              )}\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            {loading ? <LoadSpinner /> : 'Assign Case'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Assign\r\n","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Components\\Modal\\ReAssign.js",["109","110","111","112","113"],"import React, { useEffect, useState } from 'react';\r\nimport LoadSpinner from '../LoadSpinner';\r\nimport { getEmployees, getClientCases } from '../../utils/helpers/storage';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nconst ReAssign = ({ close, id, case_name, assigned, client }) => {\r\n  const [emp_name, setName] = useState('')\r\n  const [emps, setEmps] = useState(JSON.parse(getEmployees()))\r\n  var [c_case, setCCases] = useState(JSON.parse(getClientCases()))\r\n\r\n  const [showAlert, setShowAlert] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const hideAlert = () => setShowAlert(false)||setError('');\r\n\r\n  const [loading, setLoading]= useState(false)\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true)\r\n\r\n    c_case = c_case.filter(function (_c) {\r\n      return _c.id !== id;\r\n    });\r\n\r\n    const newCC = {\r\n      id:id,\r\n      client:client,\r\n      case:case_name,\r\n      assigned:emp_name\r\n    }\r\n\r\n    c_case.push(newCC)\r\n    setCCases(c_case)\r\n    console.log('New CC:', c_case)\r\n    localStorage.setItem('ClientCase', JSON.stringify(c_case))\r\n\r\n    setLoading(false)\r\n    setShowAlert(true);\r\n    setSuccess('Updated')\r\n    close()\r\n  }\r\n\r\n  const loadData = () =>{\r\n    setEmps(emps)\r\n    setCCases(c_case)\r\n  }\r\n\r\n  useEffect(()=>{\r\n    loadData()\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"card otc__assign\">\r\n      {showAlert && success && (\r\n        <SweetAlert\r\n          success\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={success}\r\n          timeout={3000}\r\n        />\r\n      )}\r\n      {showAlert && error && (\r\n        <SweetAlert\r\n          danger\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={error}\r\n          timeout={4000}\r\n        />\r\n      )}\r\n      <div className=\"card-header\" />\r\n      <div className=\"card-body\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Case</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter Category Name\"\r\n              value={case_name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>From</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter Category Name\"\r\n              value={assigned}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>To</label>\r\n            <select\r\n              className=\"form-control\"\r\n              value={emp_name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            >\r\n              <option>None</option>\r\n              {emps.length > 0 ? (\r\n                emps.map((e) => \r\n                  <option key={e.id} value={e.name}\r\n                    onClick={()=>setName(e.name)}>\r\n                    {e.name}\r\n                  </option>)\r\n              ) : (\r\n                <LoadSpinner />\r\n              )}\r\n            </select>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            {loading ? <LoadSpinner /> : 'Re-assign Case'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ReAssign\r\n","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\AddCase.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\CaseTable.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\index.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\AddClient.js",["114"],"import React, { useState } from 'react'\r\nimport Company from './Company';\r\nimport Individual from './Individual';\r\n\r\nconst AddClient = ({ close }) => {\r\n  const [currentTab, setCurrentTab] = useState('individual');\r\n  const [tab, setTab] = useState(0);\r\n\r\n  const renderView = () => {\r\n    if (currentTab === 'individual') {\r\n      return <Individual close={close} />;\r\n    }\r\n    if (currentTab === 'company') {\r\n      return <Company close={close} />;\r\n    }\r\n  };\r\n\r\n  const handleToggle=(key)=>{\r\n    setTab(key);\r\n  }\r\n\r\n  return (\r\n    <div className='otc__add-client'>\r\n      <div className='container-fluid'>\r\n        <div className='row'>\r\n          <div className='col-xs-12'>\r\n            <nav>\r\n              <div className=\"nav nav-tabs nav-justified\" id=\"nav-tab\" role=\"tablist\" style={{ border: 'none' }}>\r\n                <a\r\n                  href='#individual'\r\n                  id=\"nav-home-tab\"\r\n                  data-toggle=\"tab\"\r\n                  role=\"tab\"\r\n                  aria-controls=\"nav-home\"\r\n                  aria-selected=\"true\"\r\n                  onClick={() => {setCurrentTab('individual'), handleToggle(1)}}\r\n                  // eslint-disable-next-line react/jsx-no-duplicate-props\r\n                  className={tab === 1 ? 'nav-item nav-link active' : 'nav-item nav-link'}\r\n                  style={{\r\n                    borderTop: 'none',\r\n                    borderLeft: 'none',\r\n                    borderRight: 'none'\r\n                  }}\r\n                >\r\n                  <div className='otc__tabs-c'>\r\n                    <span className='otc__tab-c'>Individual</span>\r\n                  </div>\r\n                </a>\r\n                <a\r\n                  href='#company'\r\n                  id=\"nav-home-tab\"\r\n                  data-toggle=\"tab\"\r\n                  role=\"tab\"\r\n                  aria-controls=\"nav-home\"\r\n                  aria-selected=\"true\"\r\n                  onClick={() => {setCurrentTab('company'), handleToggle(2)}}\r\n                  // eslint-disable-next-line react/jsx-no-duplicate-props\r\n                  className={tab === 2 ? 'nav-item nav-link active' : 'nav-item nav-link'}\r\n                >\r\n                  <div className='otc__tabs-c'>\r\n                    <span className='otc__tab-c'>Company</span>\r\n                  </div>\r\n                </a>\r\n              </div>\r\n            </nav>\r\n\r\n            <div\r\n              className=\"tab-content\"\r\n              style={{\r\n                border: '#d3d3d3 solid',\r\n                borderWidth: 'thin'\r\n              }}\r\n            >\r\n              <div className=\"tab-pane active show\" role=\"tabpanel\">\r\n                {renderView()}\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n            \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddClient\r\n","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\Company.js",["115"],"import React, { useState } from 'react'\r\nimport LoadSpinner from '../../Components/LoadSpinner';\r\nimport { getClients } from '../../utils/helpers/storage';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nconst Company = ({ close }) => {\r\n  const [clients, setClients] = useState(JSON.parse(getClients()))\r\n\r\n  const [showAlert, setShowAlert] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const hideAlert = () => setShowAlert(false)||setError('');\r\n\r\n  const [loading, setLoading]= useState(false)\r\n\r\n  const [name, setName] = useState('')\r\n  const [website, setWebsite] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [mobile, setMobile] = useState('')\r\n  const [tin, setTin] = useState('')\r\n  const [address, setAddress] = useState('')\r\n  const [country, setCountry] = useState('')\r\n\r\n  const [_name, setNameCc] = useState('')\r\n  const [_email, setEmailC] = useState('')\r\n  const [_mobile, setMobileC] = useState('')\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true)\r\n    const _id = (clients.length + 1);\r\n\r\n    const newClient = {\r\n      id:_id,\r\n      name: name,\r\n      website:website,\r\n      email:email,\r\n      phone:mobile,\r\n      tin:tin,\r\n      address:address,\r\n      residence:country,\r\n      correspondent:_name,\r\n      corr_email:_email,\r\n      corr_phone:_mobile\r\n    }\r\n\r\n    clients.push(newClient)\r\n    setClients(clients)\r\n    console.log('New Clients:', clients)\r\n    localStorage.setItem('Clients', JSON.stringify(clients))\r\n\r\n    setLoading(false)\r\n    setShowAlert(true);\r\n    setSuccess('New Client Created')\r\n    close()\r\n  }\r\n\r\n  return (\r\n    <div className=\"otc__add-case card\">\r\n      {showAlert && success && (\r\n        <SweetAlert\r\n          success\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={success}\r\n          timeout={3000}\r\n        />\r\n      )}\r\n      {showAlert && error && (\r\n        <SweetAlert\r\n          danger\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={error}\r\n          timeout={4000}\r\n        />\r\n      )}\r\n      <div className=\"card-header\" />\r\n      <div className=\"card-body\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label> Company Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"full name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"form-group left\">\r\n              <label>Website URL</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"\"\r\n                value={website}\r\n                onChange={(e) => setWebsite(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"form-group right\">\r\n              <label>Email Address</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                placeholder=\"email address\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"form-group left\">\r\n              <label>Company Number</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                placeholder=\"+256...\"\r\n                value={mobile}\r\n                onChange={(e) => setMobile(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"form-group right\">\r\n              <label>TIN</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"\"\r\n                value={tin}\r\n                onChange={(e) => setTin(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"form-group left\">\r\n              <label>Address</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"e.g plot 24 luthuli avenue\"\r\n                value={address}\r\n                onChange={(e) => setAddress(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"form-group right\">\r\n              <label>Country of Operation</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"\"\r\n                value={country}\r\n                onChange={(e) => setCountry(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Name of Correspondent</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"full name\"\r\n              value={_name}\r\n              onChange={(e) => setNameCc(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"form-group left\">\r\n              <label>Email Address</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                placeholder=\"\"\r\n                value={_email}\r\n                onChange={(e) => setEmailC(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"form-group right\">\r\n              <label>Phone Number</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"+256...\"\r\n                value={_mobile}\r\n                onChange={(e) => setMobileC(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            {loading ? <LoadSpinner /> : 'Create Client'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Company\r\n","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Clients\\Individual.js",["116"],"import React, { useState } from 'react'\r\nimport LoadSpinner from '../../Components/LoadSpinner';\r\nimport { getClients } from '../../utils/helpers/storage';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nconst Individual = ({ close }) => {\r\n  const [clients, setClients] = useState(JSON.parse(getClients()))\r\n\r\n  const [showAlert, setShowAlert] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const hideAlert = () => setShowAlert(false)||setError('');\r\n\r\n  const [loading, setLoading]= useState(false)\r\n\r\n  const [first_name, setFirst] = useState('')\r\n  const [middle_name, setMiddle] = useState('')\r\n  const [last_name, setLast] = useState('')\r\n  const [dob, setDob] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [mobile, setMobile] = useState('')\r\n  const [tin, setTin] = useState('')\r\n  const [address, setAddress] = useState('')\r\n  const [country, setCountry] = useState('')\r\n\r\n  var name = (first_name + ' ' + last_name + ' ' +  middle_name)\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true)\r\n    const _id = (clients.length + 1);\r\n\r\n    const newClient = {\r\n      id:_id,\r\n      name: name,\r\n      dob:dob,\r\n      email:email,\r\n      phone:mobile,\r\n      tin:tin,\r\n      address:address,\r\n      residence:country\r\n    }\r\n\r\n    clients.push(newClient)\r\n    setClients(clients)\r\n    console.log('New Clients:', clients)\r\n    localStorage.setItem('Clients', JSON.stringify(clients))\r\n\r\n    setLoading(false)\r\n    setShowAlert(true);\r\n    setSuccess('New Client Created')\r\n    close()\r\n  }\r\n  \r\n  return (\r\n    <div className=\"otc__add-case card\">\r\n      {showAlert && success && (\r\n        <SweetAlert\r\n          success\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={success}\r\n          timeout={3000}\r\n        />\r\n      )}\r\n      {showAlert && error && (\r\n        <SweetAlert\r\n          danger\r\n          onConfirm={() => hideAlert()}\r\n          onCancel={() => hideAlert()}\r\n          title={error}\r\n          timeout={4000}\r\n        />\r\n      )}\r\n      <div className=\"card-header\" />\r\n      <div className=\"card-body\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Name</label>\r\n            <div className=\" container-fluid\">\r\n              <div className='row'>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control name\"\r\n                  placeholder=\"first name\"\r\n                  value={first_name}\r\n                  onChange={(e) => setFirst(e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control name\"\r\n                  placeholder=\"middle name\"\r\n                  value={middle_name}\r\n                  onChange={(e) => setMiddle(e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control name\"\r\n                  placeholder=\"last name\"\r\n                  value={last_name}\r\n                  onChange={(e) => setLast(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"form-group dob\">\r\n              <label>D.O.B</label>\r\n              <input\r\n                type=\"date\"\r\n                className=\"form-control\"\r\n                placeholder=\"date of birth\"\r\n                value={dob}\r\n                onChange={(e) => setDob(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"form-group email\">\r\n              <label>Email Address</label>\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                placeholder=\"email address\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"form-group number\">\r\n              <label>Mobile Number</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                placeholder=\"e.g +256-...\"\r\n                value={mobile}\r\n                onChange={(e) => setMobile(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"form-group tin\">\r\n              <label>TIN</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"TIN\"\r\n                value={tin}\r\n                onChange={(e) => setTin(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Address</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"home address\"\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Country of Residence</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"country of residence\"\r\n              value={country}\r\n              onChange={(e) => setCountry(e.target.value)}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            {loading ? <LoadSpinner /> : 'Create Client'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Individual\r\n","C:\\Users\\FAITH DAKA\\octagon_tc\\src\\utils\\helpers\\storage.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\utils\\helpers\\set.js",[],"C:\\Users\\FAITH DAKA\\octagon_tc\\src\\Pages\\Cases\\UpdateCase.js",["117","118","119","120","121","122"],{"ruleId":"123","severity":1,"message":"124","line":6,"column":19,"nodeType":"125","endLine":6,"endColumn":24},{"ruleId":"123","severity":1,"message":"126","line":6,"column":26,"nodeType":"125","endLine":6,"endColumn":28},{"ruleId":"123","severity":1,"message":"127","line":6,"column":30,"nodeType":"125","endLine":6,"endColumn":39},{"ruleId":"123","severity":1,"message":"128","line":6,"column":41,"nodeType":"125","endLine":6,"endColumn":47},{"ruleId":"123","severity":1,"message":"124","line":6,"column":21,"nodeType":"125","endLine":6,"endColumn":26},{"ruleId":"123","severity":1,"message":"126","line":6,"column":28,"nodeType":"125","endLine":6,"endColumn":30},{"ruleId":"123","severity":1,"message":"127","line":6,"column":32,"nodeType":"125","endLine":6,"endColumn":41},{"ruleId":"123","severity":1,"message":"129","line":6,"column":43,"nodeType":"125","endLine":6,"endColumn":51},{"ruleId":"123","severity":1,"message":"128","line":6,"column":53,"nodeType":"125","endLine":6,"endColumn":59},{"ruleId":"123","severity":1,"message":"124","line":5,"column":22,"nodeType":"125","endLine":5,"endColumn":27},{"ruleId":"123","severity":1,"message":"124","line":6,"column":20,"nodeType":"125","endLine":6,"endColumn":25},{"ruleId":"123","severity":1,"message":"124","line":6,"column":23,"nodeType":"125","endLine":6,"endColumn":28},{"ruleId":"123","severity":1,"message":"130","line":45,"column":34,"nodeType":"131","endLine":45,"endColumn":39},{"ruleId":"123","severity":1,"message":"132","line":45,"column":40,"nodeType":"131","endLine":45,"endColumn":46},{"ruleId":"123","severity":1,"message":"133","line":45,"column":47,"nodeType":"131","endLine":45,"endColumn":49},{"ruleId":"123","severity":1,"message":"130","line":48,"column":16,"nodeType":"131","endLine":48,"endColumn":21},{"ruleId":"123","severity":1,"message":"132","line":48,"column":22,"nodeType":"131","endLine":48,"endColumn":28},{"ruleId":"123","severity":1,"message":"133","line":48,"column":29,"nodeType":"131","endLine":48,"endColumn":31},"react/prop-types","'close' is missing in props validation","Property","'id' is missing in props validation","'case_name' is missing in props validation","'client' is missing in props validation","'assigned' is missing in props validation","'match' is missing in props validation","Identifier","'match.params' is missing in props validation","'match.params.id' is missing in props validation"]